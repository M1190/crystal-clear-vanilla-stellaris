#################################
### Deposits and blockers
#################################
eo_deposits_and_blockers = {
	###Irradiated Evolution
	if = {
		limit = {
			owner = {
				has_origin = origin_irradiated_evolution
			}
		}
		clear_deposits = yes
		if = {
			limit = {
				owner = {
					has_authority = auth_hive_mind
				}
			}
			add_deposit = d_crowded_burrows
		}
		else = {
			add_deposit = d_repurposed_ancient_settlement
		}
		add_deposit = d_tomb_world_wasteland
		add_deposit = d_radioactive_ruins
		add_deposit = d_bomb_crater
		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent
		# 3 + 4 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins
		# 3 + 2 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		add_deposit = d_fungal_forest
	}
	###Starship Graveyard deposits
	if = {
		limit = {
			owner = {
				has_origin = origin_starship_graveyard
			}
		}
		add_deposit = d_irreparable_wreckage
		while = {
			count = 5
			add_deposit = d_starship_graveyard
		}
	}
	#####Long Sleep and Reactivated pop blocker clearing
	if = {
		limit = {
			OR = {
				owner = {
					has_origin = origin_long_sleep
				}
				owner = {
					has_origin = origin_reactivated
				}
			}
		}
		remove_deposit = d_decrepit_dwellings
		remove_deposit = d_tomb_world_ruins
		remove_deposit = d_unsupervised_settlement
		remove_deposit = d_collapsed_burrows
	}
	#####The Long Sleep blockers
	if = {
		limit = {
			owner = {
				has_origin = origin_long_sleep
			}
		}
		if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			while = {
				count = 9
				add_deposit = d_cryo_facilities
			}
		}
		else_if = {
			limit = {
				owner = {
					is_megacorp = yes
				}
			}
			while = {
				count = 8
				add_deposit = d_cryo_facilities
			}
		}
		else_if = {
			limit = {
				owner = {
					is_regular_empire = yes
				}
			}
			while = {
				count = 7
				add_deposit = d_cryo_facilities
			}
		}
	}
	##### Reactivated blockers
	if = {
		limit = {
			owner = {
				has_origin = origin_reactivated
			}
		}
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_assimilator
				}
			}
			while = {
				count = 3
				add_deposit = d_cryo_facilities
			}
			while = {
				count = 5
				add_deposit = d_machine_storage
			}
		}
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
				}
			}
			while = {
				count = 4
				add_deposit = d_cryo_facilities
			}
			while = {
				count = 7
				add_deposit = d_machine_storage
			}
		}
		else = {
			while = {
				count = 7
				add_deposit = d_machine_storage
			}
		}
	}
	###Monster Tamers deposits
	if = {
		limit = {
			owner = {
				has_origin = origin_monster_tamers
			}
		}
		add_deposit = d_titan_hunting_grounds
		set_planet_flag = titanic_life_can_build
		owner = {
			set_country_flag = titanic_life_soldiers
		}
		while = {
			count = 3
			create_army = {
				name = "NAME_Titanic_Guardian"
				owner = root.owner
				type = "titanic_guardian_army"
			}
		}
		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
				}
			}
			set_planet_flag = lithoid_kaiju
		}
	}
	###Genius Loci no deposits
	if = {
		limit = {
			owner = {
				has_origin = origin_genius_loci
			}
		}
		clear_deposits = yes
		add_deposit = d_unassimilated_drone_settlement
		while = {
			count = 5
			add_deposit = d_unassimilated_growth
		}
	}
	###Survival of the Fittest deposits & blockers
	if = {
		limit = {
			owner = {
				has_origin = origin_survival_of_the_fittest
			}
		}
		clear_deposits = yes
		add_deposit = d_fungal_forest		# 3 food
		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
				}
			}
			add_deposit = d_veiny_cliffs			# 1 minerals
			add_deposit = d_submerged_ore_veins			# 3 minerals
		}
		else = {
			add_deposit = d_lush_jungle			# 2 food
			add_deposit = d_tropical_island			# 3 food
		}
		add_deposit = d_hot_springs		# 1 energy
		add_deposit = d_rushing_waterfalls		# 2 energy
		add_deposit = d_tempestous_mountain		# 3 energy
		add_deposit = d_mineral_fields		# 1 minerals
		add
		deposit = d_great_river		# 2 food
		add_deposit = d_ore_rich_caverns		# 2 minerals
		add_deposit = d_submerged_ore_veins		# 3 minerals
		add_deposit = d_alien_pets_deposit
		add_deposit = d_dangerous_wildlife_blocker
		add_deposit = d_dense_jungle
		add_deposit = d_noxious_swamp
		add_deposit = d_toxic_kelp
	}
}

#################################
### Buildings and districts
#################################
eo_buildings_and_districts = {
	########Districts for Biomedical Renaissance
	if = {
		limit = {
			owner = {
				has_origin = origin_biomedical_renaissance
			}
		}
		#Cities
		if = {
			limit = {
				owner = {
					NOT = {
						has_valid_civic = civic_agrarian_idyll
					}
				}
			}
			remove_district = district_city
			if = {
				limit = {
					is_megacorp = yes
				}
				remove_district = district_city
			}
		}
		#Generator
		remove_district = district_generator
		#Mining
		if = {
			limit = {
				owner = {
					NOT = {
						has_valid_civic = civic_agrarian_idyll
					}
				}
			}
			remove_district = district_mining
		}
		#Farming
		if = {
			limit = {
				owner = {
					NOT = {
						has_valid_civic = civic_agrarian_idyll
					}
				}
			}
			remove_district = district_farming
		}
	}
	#####Monster Tamers
	if = {
		limit = {
			owner = {
				has_origin = origin_monster_tamers
			}
		}
		if = {
			limit = {
				owner = {
					is_lithoid_empire = no
				}
			}
			remove_district = district_farming
		}
		else = {
			remove_district = district_mining
		}
	}
	#####Long Sleep/Reactivated
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_long_sleep
					has_origin = origin_reactivated
				}
			}
		}
		remove_all_buildings = yes
		if = {
			limit = {
				owner = {
					is_regular_empire = yes
				}
			}
			add_building = building_capital
		}
		else_if = {
			limit = {
				owner = {
					is_machine_empire = yes
				}
			}
			add_building = building_machine_capital
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_servitor
					}
				}
				add_building = building_organic_sanctuary
			}
			else = {
				add_building = building_machine_assembly_plant
			}
		}
		else = {
			add_building = building_hive_capital
			add_building = building_hive_warren
		}
		add_building = building_research_lab_1
		#####Districts
		#Cities
		while = {
			count = 2
			remove_district = district_city
			remove_district = district_hive
			remove_district = district_nexus
		}
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_servitor
						NAND = {
							is_megacorp = yes
							is_lithoid_empire = yes
						}
					}
				}
			}
			remove_district = district_city
			remove_district = district_nexus
		}
		#Industrial
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_agrarian_idyll
				}
			}
			remove_district = district_industrial
		}
		#Generator
		while = {
			count = 1
			remove_district = district_generator
		}
		if = {
			limit = {
				OWNER = {
					is_machine_empire = yes
					NAND = {
						has_country_flag = lithoid_subspecies
						has_valid_civic = civic_machine_assimilator
					}
				}
			}
			remove_district = district_generator
			if = {
				limit = {
					OWNER = {
						has_valid_civic = civic_machine_servitor
						NOT = {
							has_country_flag = lithoid_subspecies
						}
					}
				}
				remove_district = district_generator
			}
		}
		#Mining
		if = {
			limit = {
				OWNER = {
					NAND = {
						is_machine_empire = yes
						NOT = {
							has_country_flag = lithoid_subspecies
						}
					}
				}
			}
			remove_district = district_mining
			if = {
				limit = {
					OWNER = {
						is_lithoid_empire = yes
					}
				}
				remove_district = district_mining
			}
		}
		#Farming
		if = {
			limit = {
				OWNER = {
					is_machine_empire = no
				}
			}
			remove_district = district_farming
		}
	}
	#####Genius Loci
	if = {
		limit = {
			owner = {
				has_origin = origin_genius_loci
			}
		}
		while = {
			limit = {
				num_districts = {
					type = district_farming
					value > 0
				}
			}
			remove_district = district_farming
			add_district = district_farming_uncapped
		}
		while = {
			limit = {
				num_districts = {
					type = district_mining
					value > 0
				}
			}
			remove_district = district_mining
			add_district = district_mining_uncapped
		}
		while = {
			limit = {
				num_districts = {
					type = district_generator
					value > 0
				}
			}
			remove_district = district_generator
			add_district = district_generator_uncapped
		}
		while = {
			limit = {
				num_districts = {
					type = district_hive
					value > 1
				}
			}
			remove_district = district_hive
		}
	}
	#####AI Uprising
	if = {
		limit = {
			owner = {
				has_origin = origin_ai_uprising
			}
		}
		while = {
			limit = {
				num_districts = {
					type = district_generator
					value > 0
				}
			}
			remove_district = district_generator
		}
		while = {
			count = 2
			add_district = district_farming
		}
		add_district = district_nexus
		owner = {
			add_resource = {
				food = 100
			}
		}
	}
	####Stellar Cornucopia
	if = {
		limit = {
			owner = {
				has_origin = origin_stellar_cornucopia
			}
		}
		owner = {
			capital_scope = {
				change_planet_size = 3
				add_planetary_features_with_planet_size = yes
			}
		}
	}
	#####Living planet
	if = {
		limit = {
			owner = {
				has_origin = origin_living_planet
			}
		}
		while = {
			limit = {
				num_districts = {
					type = district_farming
					value > 0
				}
			}
			remove_district = district_farming
			add_district = district_farming_uncapped
		}
		while = {
			limit = {
				num_districts = {
					type = district_mining
					value > 0
				}
			}
			remove_district = district_mining
			add_district = district_mining_uncapped
		}
		while = {
			limit = {
				num_districts = {
					type = district_generator
					value > 0
				}
			}
			remove_district = district_generator
			add_district = district_generator_uncapped
		}
	}
}

#################################
### Pops
#################################
eo_pops = {
	####Pops for Biomedical Renaissance
	if = {
		limit = {
			owner = {
				has_origin = origin_biomedical_renaissance
			}
		}
		while = {
			count = 5
			random_owned_pop = {
				kill_pop = yes
			}
		}
	}
	#####Pops for The Long Sleep
	if = {
		limit = {
			owner = {
				has_origin = origin_long_sleep
			}
		}
		owner_species = {
			save_hibernating_organic_species = yes
		}
		if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			while = {
				limit = {
					num_pops > 17
				}
				random_owned_pop = {
					kill_pop = yes
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					is_megacorp = yes
				}
			}
			while = {
				limit = {
					num_pops > 15
				}
				random_owned_pop = {
					kill_pop = yes
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					is_regular_empire = yes
				}
			}
			while = {
				limit = {
					num_pops > 15
				}
				random_owned_pop = {
					kill_pop = yes
				}
			}
		}
	}
	#####Pops for Reactivated
	if = {
		limit = {
			owner = {
				has_origin = origin_reactivated
			}
		}
		owner_species = {
			save_deactivated_machine_species = yes
		}
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
				}
			}
			last_created_species = {
				save_hibernating_organic_species = yes
			}
			while = {
				limit = {
					num_pops > 30
				}
				random_owned_pop = {
					limit = {
						NOT = {
							is_species_class = MACHINE
						}
					}
					kill_pop = yes
				}
			}
			while = {
				limit = {
					num_pops > 16
				}
				random_owned_pop = {
					limit = {
						is_species_class = MACHINE
					}
					kill_pop = yes
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_assimilator
				}
			}
			last_created_species = {
				save_hibernating_organic_species = yes
			}
			while = {
				limit = {
					num_pops > 24
				}
				random_owned_pop = {
					limit = {
						NOT = {
							is_species_class = MACHINE
						}
					}
					kill_pop = yes
				}
			}
			while = {
				limit = {
					num_pops > 15
				}
				random_owned_pop = {
					limit = {
						is_species_class = MACHINE
					}
					kill_pop = yes
				}
			}
		}
		else = {
			while = {
				limit = {
					num_pops > 15
				}
				random_owned_pop = {
					kill_pop = yes
				}
			}
		}
	}
	#####Pops for AI Uprising
	if = {
		limit = {
			owner = {
				has_origin = origin_ai_uprising
			}
		}
		while = {
			count = 8
			random_owned_pop = {
				limit = {
					is_species_class = MACHINE
				}
				kill_pop = yes
			}
		}
		while = {
			count = 14
			create_pop = {
				species = last_created_species
			}
		}
	}
	####Pops for Infiltrators
	if = {
		limit = {
			owner = {
				has_origin = origin_infiltrators
			}
		}
		last_created_species = {
			set_citizenship_type = {
				country = root.owner
				type = citizenship_limited
			}
		}
		set_variable = {
			which = num_natives
			value = 0
		}
		while = {
			limit = {
				num_pops > 5
			}
			random_owned_pop = {
				kill_pop = yes
			}
			change_variable = {
				which = num_natives
				value = 1
			}
		}
		while = {
			count = num_natives
			create_pop = {
				species = last_created_species
			}
		}
	}
	####Pops for Symbiosis
	if = {
		limit = {
			owner = {
				has_origin = origin_symbiosis
			}
		}
		set_variable = {
			which = num_symbiotes
			value = root.trigger:num_pops
		}
		multiply_variable = {
			which = num_symbiotes
			value = 0.5
		}
		round_variable = num_symbiotes
		while = {
			count = num_symbiotes
			random_owned_pop = {
				kill_pop = yes
			}
		}
		while = {
			count = num_symbiotes
			create_pop = {
				species = last_created_species
			}
		}
		if = {
			limit = {
				owner = {
					has_authority = auth_hive_mind
				}
			}
			last_created_species = {
				change_species_characteristics = {
					add_trait = trait_hive_mind
				}
			}
		}
		clear_variable = num_symbiotes
	}
	#####CREATE PRE-SAPIENTS FOR NEXT GENERATION
	if = {
		limit = {
			owner = {
				has_origin = origin_next_generation
			}
		}
		if = {
			limit = {
				last_created_species = {
					OR = {
						is_species_class = PRE_MAM_SELECTABLE
						is_species_class = PRE_REP_SELECTABLE
						is_species_class = PRE_AVI_SELECTABLE
						is_species_class = PRE_ART_SELECTABLE
						is_species_class = PRE_MOL_SELECTABLE
						is_species_class = PRE_FUN_SELECTABLE
					}
				}
			}
			generate_next_generation_presapients = yes
		}
		else = {
			random_list = {
				10 = {
					create_species = {
						name = random
						class = PRE_MAM
						portrait = random
						homeworld = root
						traits = random
						sapient = no
					}
				}
				10 = {
					create_species = {
						name = random
						class = PRE_REP
						portrait = random
						homeworld = root
						traits = random
						sapient = no
					}
				}
				10 = {
					create_species = {
						name = random
						class = PRE_AVI
						portrait = random
						homeworld = root
						traits = random
						sapient = no
					}
				}
				10 = {
					create_species = {
						name = random
						class = PRE_ART
						portrait = random
						homeworld = root
						traits = random
						sapient = no
					}
				}
				10 = {
					create_species = {
						name = random
						class = PRE_MOL
						portrait = random
						homeworld = root
						traits = random
						sapient = no
					}
				}
				10 = {
					create_species = {
						name = random
						class = PRE_FUN
						portrait = random
						homeworld = root
						traits = random
						sapient = no
					}
				}
			}
			if = {
				limit = {
					last_created_species = {
						NOR = {
							has_trait = trait_presapient_starborn
							has_trait = trait_presapient_earthbound
							has_trait = trait_presapient_natural_intellectuals
							has_trait = trait_presapient_proles
							has_trait = trait_presapient_conservative
						}
					}
				}
				random_list = {
					20 = {
						modify_species = {
							species = last_created_species
							add_trait = trait_presapient_starborn
						}
					}
					20 = {
						modify_species = {
							species = last_created_species
							add_trait = trait_presapient_earthbound
						}
					}
					20 = {
						modify_species = {
							species = last_created_species
							add_trait = trait_presapient_natural_intellectuals
						}
					}
					20 = {
						modify_species = {
							species = last_created_species
							add_trait = trait_presapient_proles
						}
					}
					20 = {
						modify_species = {
							species = last_created_species
							add_trait = trait_presapient_conservative
						}
					}
				}
			}
		}
		####Create pops
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
	}
	####Pops for Sibling Rivalry
	if = {
		limit = {
			owner = {
				has_origin = origin_sibling_rivalry
			}
		}
		while = {
			count = 3
			random_owned_pop = {
				kill_pop = yes
			}
		}
	}
}

#################################
### Planetary Modifiers and Planets
#################################
eo_modifiers_and_planets = {
	#####Irradiated Evolution - No Tomb World colonies for advanced empires
	if = {
		limit = {
			owner = {
				has_origin = origin_irradiated_evolution
			}
		}
		owner = {
			every_owned_planet = {
				limit = {
					is_capital = no
				}
				change_pc = rl_habitable_normal
			}
		}
	}
	######Monster Tamers modifier
	if = {
		limit = {
			owner = {
				has_origin = origin_monster_tamers
			}
		}
		owner = {
			capital_scope = {
				add_modifier = {
					modifier = titanic_life
				}
			}
		}
	}
	######Surival of the Fittest modifier
	if = {
		limit = {
			owner = {
				has_origin = origin_survival_of_the_fittest
			}
		}
		owner = {
			capital_scope = {
				add_modifier = {
					modifier = death_world_mod
				}
			}
		}
	}
	####Stellar Cornucopia resources
	if = {
		limit = {
			owner = {
				has_origin = origin_stellar_cornucopia
			}
		}
		owner = {
			capital_scope = {
				solar_system = {
					system_star = {
						clear_deposits = yes
						set_deposit = d_energy_10
					}
					every_system_planet = {
						limit = {
							has_deposit = d_energy_5
						}
						clear_deposits = yes
						set_deposit = d_energy_8
					}
					every_system_planet = {
						limit = {
							has_deposit = d_minerals_5
						}
						clear_deposits = yes
						set_deposit = d_minerals_8
					}
					every_system_planet = {
						limit = {
							OR = {
								has_deposit = d_energy_2
								has_deposit = d_energy_3
							}
						}
						clear_deposits = yes
						random_list = {
							50 = {
								set_deposit = d_energy_5
							}
							50 = {
								set_deposit = d_energy_6
							}
						}
					}
					every_system_planet = {
						limit = {
							OR = {
								has_deposit = d_minerals_2
								has_deposit = d_minerals_3
							}
						}
						clear_deposits = yes
						random_list = {
							50 = {
								set_deposit = d_minerals_5
							}
							50 = {
								set_deposit = d_minerals_6
							}
						}
					}
					every_system_planet = {
						limit = {
							OR = {
								has_deposit = d_society_2
								has_deposit = d_society_3
							}
						}
						clear_deposits = yes
						random_list = {
							50 = {
								set_deposit = d_society_5
							}
							50 = {
								set_deposit = d_society_6
							}
						}
					}
					every_system_planet = {
						limit = {
							OR = {
								has_deposit = d_physics_2
								has_deposit = d_physics_3
							}
						}
						clear_deposits = yes
						random_list = {
							50 = {
								set_deposit = d_physics_5
							}
							50 = {
								set_deposit = d_physics_6
							}
						}
					}
					every_system_planet = {
						limit = {
							OR = {
								has_deposit = d_engineering_2
								has_deposit = d_engineering_3
							}
						}
						clear_deposits = yes
						random_list = {
							50 = {
								set_deposit = d_engineering_5
							}
							50 = {
								set_deposit = d_engineering_6
							}
						}
					}
					random_system_planet = {
						limit = {
							has_planet_flag = starting_deposit
							NOT = {
								has_planet_flag = ignore_startup_effect
							}
							OR = {
								has_deposit = d_minerals_5
								has_deposit = d_minerals_6
								has_deposit = d_minerals_8
							}
						}
						add_deposit = d_alloys_2
					}
					#####Exotic Gases
					random_system_planet = {
						limit = {
							NOT = {
								has_planet_flag = starting_deposit
							}
							NOT = {
								has_planet_flag = ignore_startup_effect
							}
							is_homeworld = no
						}
						random_list = {
							70 = {
								add_deposit = d_exotic_gases_1
							}
							30 = {
								add_deposit = d_exotic_gases_2
							}
						}
						set_planet_flag = stellar_cornucopia_rare_resource_deposit
					}
					#####Rare Crystals
					if = {
						limit = {
							any_system_planet = {
								NOT = {
									has_planet_flag = starting_deposit
								}
								NOT = {
									has_planet_flag = ignore_startup_effect
								}
								is_homeworld = no
								NOT = {
									has_planet_flag = stellar_cornucopia_rare_resource_deposit
								}
							}
						}
						random_system_planet = {
							limit = {
								NOT = {
									has_planet_flag = starting_deposit
								}
								NOT = {
									has_planet_flag = ignore_startup_effect
								}
								is_homeworld = no
								NOT = {
									has_planet_flag = stellar_cornucopia_rare_resource_deposit
								}
							}
							random_list = {
								70 = {
									add_deposit = d_rare_crystals_1
								}
								30 = {
									add_deposit = d_rare_crystals_2
								}
							}
							set_planet_flag = stellar_cornucopia_rare_resource_deposit
						}
					}
					else = {
						random_system_planet = {
							limit = {
								NOT = {
									has_planet_flag = starting_deposit
								}
								NOT = {
									has_planet_flag = ignore_startup_effect
								}
								is_homeworld = no
							}
							random_list = {
								70 = {
									add_deposit = d_rare_crystals_1
								}
								30 = {
									add_deposit = d_rare_crystals_2
								}
							}
							set_planet_flag = stellar_cornucopia_rare_resource_deposit
						}
					}
					#####Volatile Motes
					if = {
						limit = {
							any_system_planet = {
								NOT = {
									has_planet_flag = starting_deposit
								}
								NOT = {
									has_planet_flag = ignore_startup_effect
								}
								is_homeworld = no
								NOT = {
									has_planet_flag = stellar_cornucopia_rare_resource_deposit
								}
							}
						}
						random_system_planet = {
							limit = {
								NOT = {
									has_planet_flag = starting_deposit
								}
								NOT = {
									has_planet_flag = ignore_startup_effect
								}
								is_homeworld = no
								NOT = {
									has_planet_flag = stellar_cornucopia_rare_resource_deposit
								}
							}
							random_list = {
								70 = {
									add_deposit = d_volatile_motes_1
								}
								30 = {
									add_deposit = d_volatile_motes_2
								}
							}
						}
					}
					else = {
						random_system_planet = {
							limit = {
								NOT = {
									has_planet_flag = starting_deposit
								}
								NOT = {
									has_planet_flag = ignore_startup_effect
								}
								is_homeworld = no
							}
							random_list = {
								70 = {
									add_deposit = d_volatile_motes_1
								}
								30 = {
									add_deposit = d_volatile_motes_2
								}
							}
						}
					}
					#####Terraforming Candidate
					if = {
						limit = {
							NOT = {
								any_system_planet = {
									has_modifier = terraforming_candidate
								}
							}
						}
						if = {
							limit = {
								any_system_planet = {
									OR = {
										is_planet_class = pc_barren
										is_planet_class = pc_barren_cold
									}
								}
							}
							random_system_planet = {
								limit = {
									OR = {
										is_planet_class = pc_barren
										is_planet_class = pc_barren_cold
									}
								}
								set_stellar_cornucopia_terraforming_candidate_size = yes
								add_modifier = {
									modifier = terraforming_candidate
								}
							}
						}
						else_if = {
							limit = {
								any_system_planet = {
									is_planet_class = pc_toxic
									is_planet_class = pc_frozen
									is_planet_class = pc_molten
								}
							}
							random_system_planet = {
								limit = {
									OR = {
										is_planet_class = pc_toxic
										is_planet_class = pc_frozen
										is_planet_class = pc_molten
									}
								}
								random_list = {
									50 = {
										change_pc = pc_barren
									}
									50 = {
										change_pc = pc_barren_cold
									}
								}
								set_stellar_cornucopia_terraforming_candidate_size = yes
								add_modifier = {
									modifier = terraforming_candidate
								}
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_planet_class = pc_gas_giant
								}
								random_list = {
									50 = {
										change_pc = pc_barren
									}
									50 = {
										change_pc = pc_barren_cold
									}
								}
								set_stellar_cornucopia_terraforming_candidate_size = yes
								add_modifier = {
									modifier = terraforming_candidate
								}
							}
						}
					}
				}
			}
		}
	}
	####Genius Loci empire modifier
	if = {
		limit = {
			owner = {
				has_origin = origin_genius_loci
			}
		}
		owner = {
			add_modifier = {
				modifier = foreign_biosphere_acclimatization
				days = 9125
			}
		}
	}
	####Dragon's Lair spawn Ravinax
	if = {
		limit = {
			owner = {
				has_origin = origin_dragon_lair
			}
		}
		owner = {
			set_country_flag = dragons_lair_country
		}
		set_planet_flag = ravinax_world
		save_global_event_target_as = ravinax_world
		set_planet_flag = dragon_feed_0
		#planet_event = { id = eo_starship_graveyard.16 days = 27375 random = 3650}
		solar_system = {
			random_system_planet = {
				limit = {
					OR = {
						has_deposit = d_minerals_2
						has_deposit = d_minerals_3
					}
				}
				set_name = "NAME_Ravinax_Nest"
				set_planet_flag = ravinax_lair
				set_planet_flag = ravinax_alive
				save_global_event_target_as = ravinax_lair
				clear_deposits = yes
				add_deposit = d_ravinax_hoard
				create_country = {
					name = "NAME_Ravinax"
					type = guardian_dragon
					flag = {
						icon = {
							category = "zoological"
							file = "flag_zoological_6.dds"
						}
						background = {
							category = "backgrounds"
							file = "00_solid.dds"
						}
						colors = {
							"dark_green"
							"dark_green"
							"null"
							"null"
						}
					}
					effect = {
						set_faction_hostility = {
							target = root.owner
							set_hostile = no
							set_neutral = yes
							set_friendly = no
						}
						set_faction_hostility = {
							target = event_target:caravaneer_home_country
							set_hostile = no
							set_neutral = yes
							set_friendly = no
						}
						set_faction_hostility = {
							target = event_target:caravaneer_fleet1_country
							set_hostile = no
							set_neutral = yes
							set_friendly = no
						}
						set_faction_hostility = {
							target = event_target:caravaneer_fleet2_country
							set_hostile = no
							set_neutral = yes
							set_friendly = no
						}
						set_faction_hostility = {
							target = event_target:caravaneer_fleet3_country
							set_hostile = no
							set_neutral = yes
							set_friendly = no
						}
						save_global_event_target_as = ravinax_country
						set_country_flag = ravinax_country
						every_playable_country = {
							establish_communications_no_message = event_target:ravinax_country
						}
						create_fleet = {
							name = "NAME_Ravinax"
							settings = {
								spawn_debris = no
								is_boss = yes
							}
							effect = {
								set_owner = event_target:ravinax_country
								create_ship = {
									name = "NAME_Ravinax"
									design = "NAME_Ravinax"
								}
								save_global_event_target_as = ravinax_fleet
								set_fleet_flag = ravinax
								set_location = {
									target = event_target:ravinax_lair
									distance = 10
									angle = 90
									direction = in_system
								}
								set_fleet_stance = aggressive
								set_aggro_range_measure_from = self
								set_aggro_range = 400
								event_target:ravinax_lair = {
									planet_event = {
										id = eo_dragons_lair.1
									}
								}
								queue_actions = {
									repeat = {
										find_closest_planet = {
											trigger = {
												id = ravinax.1
												is_star = no
												has_planet_flag = ravinax_patrol_1
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 40
													random = 20
												}
											}
										}
										find_closest_planet = {
											trigger = {
												id = ravinax.2
												is_star = no
												has_planet_flag = ravinax_patrol_2
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 40
													random = 20
												}
											}
										}
										find_closest_planet = {
											trigger = {
												id = ravinax.3
												is_star = no
												has_planet_flag = ravinax_patrol_3
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 40
													random = 20
												}
											}
										}
										find_closest_planet = {
											trigger = {
												id = ravinax.4
												has_planet_flag = ravinax_world
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 70
													random = 20
												}
											}
										}
										find_closest_planet = {
											trigger = {
												id = ravinax.5
												is_star = no
												has_planet_flag = ravinax_patrol_4
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 40
													random = 20
												}
											}
										}
										find_closest_planet = {
											trigger = {
												id = ravinax.6
												is_star = no
												has_planet_flag = ravinax_patrol_5
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 40
													random = 20
												}
											}
										}
										find_closest_planet = {
											trigger = {
												id = ravinax.7
												has_planet_flag = ravinax_lair
											}
											found_planet = {
												move_to = this
												orbit_planet = this
												wait = {
													duration = 100
													random = 80
												}
											}
										}
									}
								}
							}
						}
					}
				}
				create_ambient_object = {
					type = "medium_debris_01_object"
					#entity_offset_height = { min = -0 max = -25 }
					location = this
				}
				create_ambient_object = {
					type = "abandoned_ship_object"
					location = this
				}
			}
			create_ambient_object = {
				type = "medium_debris_02_object"
				#entity_offset_height = { min = -0 max = -25 }
				location = this
			}
			create_ambient_object = {
				type = "small_debris_object"
				#entity_offset_height = { min = -0 max = -25 }
				location = this
			}
			create_ambient_object = {
				type = "small_debris_object"
				#entity_offset_height = { min = -0 max = -25 }
				location = this
			}
		}
	}
	####Starship Graveyard space debris
	if = {
		limit = {
			owner = {
				has_origin = origin_starship_graveyard
			}
		}
		create_ambient_object = {
			type = "medium_debris_01_object"
			#entity_offset_height = { min = -0 max = -25 }
			location = this
		}
	}
	####Living Planet modifier
	if = {
		limit = {
			owner = {
				has_origin = origin_living_planet
			}
		}
		owner = {
			capital_scope = {
				add_modifier = {
					modifier = living_planet
				}
				create_country = {
					name = "[root.GetName]"
					type = living_planet
					flag = random
					effect = {
						set_custom_capital_location = root
						set_country_flag = suppress_first_contact_comms
						establish_communications_no_message = root.owner
						set_country_flag = living_planet_@root
						root = {
							set_planet_flag = living_planet_of_@prev
						}
						add_trust = {
							amount = 20
							who = root.owner
						}
					}
				}
			}
		}
	}
	####Hole in the Void wormhole
	if = {
		limit = {
			owner = {
				has_origin = origin_wormhole
			}
		}
		solar_system = {
			set_star_flag = wormhole_home_of_@root.owner
			random_system = {
				limit = {
					distance = {
						min_jumps = 5
					}
					NOT = {
						has_star_flag = empire_home_system
					}
				}
				prev = {
					# done this way to ensure we don't spawn "orphan wormholes (wormholes that aren't linked to anything)
					spawn_natural_wormhole = {
						bypass_type = wormhole
						random_pos = no
						orbit_angle = 360
					}
				}
				spawn_natural_wormhole = {
					bypass_type = wormhole
					random_pos = no
					orbit_angle = 270
				}
				link_wormholes = prev
				set_star_flag = connected_system_of_@prev
			}
		}
		owner = {
			set_country_flag = encountered_first_wormhole
			add_seen_bypass_type = wormhole
			country_event = {
				id = eo_wormhole.1
				days = 1440
				random = 360
			}
		}
	}
	####Sibling Rivalry
	if = {
		limit = {
			owner = {
				has_origin = origin_sibling_rivalry
			}
		}
		add_planet_devastation = 20
		remove_deposit = d_decrepit_dwellings
		if = {
			limit = {
				owner = {
					has_ethic = ethic_militarist
				}
			}
			add_planet_devastation = 20
			random_deposit = {
				limit = {
					NOR = {
						is_deposit_type = d_bomb_crater
						is_blocker = yes
					}
				}
				remove_deposit = yes
			}
			add_deposit = d_bomb_crater
		}
		if = {
			limit = {
				owner = {
					has_ethic = ethic_fanatic_militarist
				}
			}
			add_planet_devastation = 40
			while = {
				count = 2
				random_deposit = {
					limit = {
						NOR = {
							is_deposit_type = d_bomb_crater
							is_blocker = yes
						}
					}
					remove_deposit = yes
				}
				add_deposit = d_bomb_crater
			}
		}
		solar_system = {
			if = {
				limit = {
					has_star_flag = sol_system
				}
				random_list = {
					20 = {
						random_system_planet = {
							limit = {
								has_modifier = terraforming_candidate
							}
							change_pc = pc_arid
							remove_modifier = terraforming_candidate
							save_event_target_as = sister_planet
						}
					}
					#	10 = {
					#		random_system_planet = {
					#			limit = {
					#				is_planet_class = pc_frozen
					#				planet_size = 9
					#			}
					#			change_pc = pc_arctic
					#			save_event_target_as = sister_planet
					#		}
					#	}
				}
			}
			else_if = {
				# Wet
				limit = {
					root = {
						is_wet = yes
					}
				}
				if = {
					limit = {
						any_system_planet = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_molten
								is_planet_class = pc_toxic
								is_planet_class = pc_frozen
								is_planet_class = pc_barren_cold
							}
						}
					}
					random_system_planet = {
						limit = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_molten
								is_planet_class = pc_toxic
								is_planet_class = pc_frozen
								is_planet_class = pc_barren_cold
							}
						}
						save_event_target_as = sister_planet
					}
				}
				else = {
					random_system_planet = {
						NOR = {
							is_asteroid = yes
							is_star = yes
							is_colonizable = yes
						}
						save_event_target_as = sister_planet
					}
				}
				event_target:sister_planet = {
					if = {
						limit = {
							is_planet_class = pc_molten
						}
						change_pc = pc_desert
					}
					else_if = {
						limit = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_toxic
							}
						}
						random_list = {
							10 = {
								change_pc = pc_arid
							}
							10 = {
								change_pc = pc_desert
							}
							10 = {
								change_pc = pc_savanna
							}
						}
					}
					else = {
						random_list = {
							10 = {
								change_pc = pc_alpine
							}
							10 = {
								change_pc = pc_arctic
							}
							10 = {
								change_pc = pc_tundra
							}
						}
					}
					if = {
						limit = {
							planet_size > 25
						}
						set_planet_size = 25
					}
				}
			}
			else_if = {
				# Dry
				limit = {
					root = {
						is_dry = yes
					}
				}
				if = {
					limit = {
						any_system_planet = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_toxic
								is_planet_class = pc_frozen
								is_planet_class = pc_barren_cold
							}
						}
					}
					random_system_planet = {
						limit = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_toxic
								is_planet_class = pc_frozen
								is_planet_class = pc_barren_cold
							}
						}
						save_event_target_as = sister_planet
					}
				}
				else = {
					random_system_planet = {
						NOR = {
							is_asteroid = yes
							is_star = yes
							is_colonizable = yes
						}
						save_event_target_as = sister_planet
					}
				}
				event_target:sister_planet = {
					if = {
						limit = {
							is_planet_class = pc_molten
						}
						change_pc = pc_tropical
					}
					else_if = {
						limit = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_toxic
							}
						}
						random_list = {
							10 = {
								change_pc = pc_continental
							}
							10 = {
								change_pc = pc_ocean
							}
							10 = {
								change_pc = pc_tropical
							}
						}
					}
					else_if = {
						limit = {
							is_planet_class = pc_frozen
						}
						random_list = {
							10 = {
								change_pc = pc_arctic
							}
							10 = {
								change_pc = pc_ocean
							}
						}
					}
					else = {
						random_list = {
							10 = {
								change_pc = pc_alpine
							}
							10 = {
								change_pc = pc_arctic
							}
							10 = {
								change_pc = pc_tundra
							}
						}
					}
					if = {
						limit = {
							planet_size > 25
						}
						set_planet_size = 25
					}
				}
			}
			else = {
				# Cold
				if = {
					limit = {
						any_system_planet = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_molten
								is_planet_class = pc_toxic
							}
						}
					}
					random_system_planet = {
						limit = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_molten
								is_planet_class = pc_toxic
							}
						}
						save_event_target_as = sister_planet
					}
				}
				else = {
					random_system_planet = {
						NOR = {
							is_asteroid = yes
							is_star = yes
							is_colonizable = yes
						}
						save_event_target_as = sister_planet
					}
				}
				event_target:sister_planet = {
					if = {
						limit = {
							is_planet_class = pc_molten
						}
						change_pc = pc_desert
					}
					else_if = {
						limit = {
							is_planet_class = pc_frozen
						}
						change_pc = pc_ocean
					}
					else_if = {
						limit = {
							OR = {
								is_planet_class = pc_barren_cold
							}
						}
						random_list = {
							10 = {
								change_pc = pc_continental
							}
							10 = {
								change_pc = pc_ocean
							}
						}
					}
					else_if = {
						limit = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_toxic
							}
						}
						random_list = {
							10 = {
								change_pc = pc_arid
							}
							10 = {
								change_pc = pc_desert
							}
							10 = {
								change_pc = pc_savanna
							}
							10 = {
								change_pc = pc_continental
							}
							10 = {
								change_pc = pc_ocean
							}
							10 = {
								change_pc = pc_tropical
							}
						}
					}
					else = {
						random_list = {
							10 = {
								change_pc = pc_continental
							}
							10 = {
								change_pc = pc_ocean
							}
							10 = {
								change_pc = pc_tropical
							}
						}
					}
					if = {
						limit = {
							planet_size > 25
						}
						set_planet_size = 25
					}
				}
			}
			last_created_species = {
				set_species_homeworld = event_target:sister_planet
				### Remove trait
				if = {
					limit = {
						has_trait = trait_pc_arid_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_arid_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_desert_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_desert_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_savanna_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_savanna_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_continental_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_continental_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_ocean_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_ocean_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_tropical_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_tropical_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_alpine_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_alpine_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_arctic_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_arctic_preference
					}
				}
				else_if = {
					limit = {
						has_trait = trait_pc_tundra_preference
					}
					change_species_characteristics = {
						remove_trait = trait_pc_tundra_preference
					}
				}
				### Add trait
				if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_arid
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_arid_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_desert
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_desert_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_savanna
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_savanna_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_continental
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_continental_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_ocean
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_ocean_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_tropical
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_tropical_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_alpine
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_alpine_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_arctic
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_arctic_preference
					}
				}
				else_if = {
					limit = {
						event_target:sister_planet = {
							is_planet_class = pc_tundra
						}
					}
					change_species_characteristics = {
						add_trait = trait_pc_tundra_preference
					}
				}
				save_event_target_as = conquered_species
			}
			event_target:sister_planet = {
				while = {
					count = 15
					create_pop = {
						species = event_target:conquered_species
					}
				}
				every_owned_pop = {
					add_modifier = {
						modifier = pop_recently_conquered
						days = 3600
					}
					set_pop_flag = needs_ethos_set
				}
				set_owner = root.owner
				set_colony_type = col_default
				generate_start_deposits_and_blockers = yes
				generate_start_buildings_and_districts = yes
				add_planet_devastation = 60
				remove_deposit = d_decrepit_dwellings
				random_deposit = {
					limit = {
						NOR = {
							is_deposit_type = d_bomb_crater
							is_blocker = yes
						}
					}
					remove_deposit = yes
				}
				add_deposit = d_bomb_crater
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_militarist
						}
					}
					add_planet_devastation = 20
					random_deposit = {
						limit = {
							NOR = {
								is_deposit_type = d_bomb_crater
								is_blocker = yes
							}
						}
						remove_deposit = yes
					}
					add_deposit = d_bomb_crater
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_militarist
						}
					}
					add_planet_devastation = 40
					while = {
						count = 2
						random_deposit = {
							limit = {
								NOR = {
									is_deposit_type = d_bomb_crater
									is_blocker = yes
								}
							}
							remove_deposit = yes
						}
						add_deposit = d_bomb_crater
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_materialist
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_spiritualist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_spiritualist
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_materialist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_spiritualist
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_materialist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_xenophile
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_xenophobe
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_xenophobe
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_xenophile
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_authoritarian
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_egalitarian
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_egalitarian
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_authoritarian
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_fanatic_militarist
						}
					}
					while = {
						count = 10
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_militarist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				####################################################
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_materialist
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_spiritualist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_spiritualist
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_materialist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_spiritualist
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_materialist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_xenophile
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_xenophobe
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_xenophobe
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_xenophile
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_authoritarian
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_egalitarian
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_egalitarian
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_authoritarian
							remove_pop_flag = needs_ethos_set
						}
					}
				}
				if = {
					limit = {
						root.owner = {
							has_ethic = ethic_militarist
						}
					}
					while = {
						count = 5
						random_owned_pop = {
							limit = {
								has_pop_flag = needs_ethos_set
							}
							pop_change_ethic = ethic_militarist
							remove_pop_flag = needs_ethos_set
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_gray_goo
			}
		}
		solar_system = {
			random_system_planet = {
				limit = {
					is_asteroid = no
					is_colony = no
					is_star = no
					NOT = {
						is_planet_class = pc_gas_giant
					}
				}
				change_pc = pc_gray_goo
				set_name = containment_site_alpha
				clear_deposits = yes
				add_deposit = d_gray_goo_resources_test_site
			}
		}
	}
}
